import{o as t,c as e,a as l}from"./app.e2261b09.js";const n='{"title":"XMLStarlet Toolkit","description":"","frontmatter":{"title":"XMLStarlet Toolkit","date":"2020-12-03T18:22:05.000Z","cover_index":"http://picsum.photos/450/450?random=84","tags":["XMLStarlet"],"categories":["Innovate","CLI"]},"headers":[{"level":3,"title":"Command: XML canonicalization","slug":"command-xml-canonicalization"},{"level":3,"title":"Command: Count elements matching XPath expression","slug":"command-count-elements-matching-xpath-expression"},{"level":3,"title":"Command: Count all nodes in XML document","slug":"command-count-all-nodes-in-xml-document"},{"level":3,"title":"Command: Delete elements matching XPath expression","slug":"command-delete-elements-matching-xpath-expression"},{"level":3,"title":"Command: Generate HTML from given SGML docbook document","slug":"command-generate-html-from-given-sgml-docbook-document"},{"level":3,"title":"Command: Validate XML document against DTD","slug":"command-validate-xml-document-against-dtd"},{"level":3,"title":"Command: Validate XML document against DTD","slug":"command-validate-xml-document-against-dtd-1"},{"level":3,"title":"Command: Validate XML document against DTD","slug":"command-validate-xml-document-against-dtd-2"},{"level":3,"title":"Command: Display element structure of XML document","slug":"command-display-element-structure-of-xml-document"},{"level":3,"title":"Command: Display element structure of XML document (including attributes)","slug":"command-display-element-structure-of-xml-document-including-attributes"},{"level":3,"title":"Command: Display element structure of XML document (including attribute values)","slug":"command-display-element-structure-of-xml-document-including-attribute-values"},{"level":3,"title":"Command: Escape special XML characters","slug":"command-escape-special-xml-characters"},{"level":3,"title":"Command: Calculate EXSLT (XSLT extentions) XPath value","slug":"command-calculate-exslt-xslt-extentions-xpath-value"},{"level":3,"title":"Command: Find XML files matching XPath expression (containing \'object\' element)","slug":"command-find-xml-files-matching-xpath-expression-containing-object-element"},{"level":3,"title":"Command: Generate XML document using command line xml sel","slug":"command-generate-xml-document-using-command-line-xml-sel"},{"level":3,"title":"Command: Apply XSLT stylesheet to HTML input file","slug":"command-apply-xslt-stylesheet-to-html-input-file"},{"level":3,"title":"Command: Use local-name() XSLT function in XPath expression","slug":"command-use-local-name-xslt-function-in-xpath-expression"},{"level":3,"title":"Command: Select text value of an XML element mathing given XPath expression","slug":"command-select-text-value-of-an-xml-element-mathing-given-xpath-expression"},{"level":3,"title":"Command: Move element node","slug":"command-move-element-node"},{"level":3,"title":"Command: Format XML document disabling indent","slug":"command-format-xml-document-disabling-indent"},{"level":3,"title":"Command: Predefine namespaces for XPath expressions","slug":"command-predefine-namespaces-for-xpath-expressions"},{"level":3,"title":"Command: Recover malformed XML document","slug":"command-recover-malformed-xml-document"},{"level":3,"title":"Command: Rename attributes","slug":"command-rename-attributes"},{"level":3,"title":"Command: Rename elements","slug":"command-rename-elements"},{"level":3,"title":"Command: Validate against XSD schema","slug":"command-validate-against-xsd-schema"},{"level":3,"title":"Command: xsl:copy-of in xml sel command","slug":"command-xsl-copy-of-in-xml-sel-command"},{"level":3,"title":"Command: Query XML document and produce sorted text table","slug":"command-query-xml-document-and-produce-sorted-text-table"},{"level":3,"title":"Command: Print structure of XML element using xml sel (advanced XPath expressions and xml sel command usage)","slug":"command-print-structure-of-xml-element-using-xml-sel-advanced-xpath-expressions-and-xml-sel-command-usage"},{"level":3,"title":"Command: Calculating running sum on XML document","slug":"command-calculating-running-sum-on-xml-document"},{"level":3,"title":"Command: Indent XML document with tabs","slug":"command-indent-xml-document-with-tabs"},{"level":3,"title":"Command: Generate plain text table from XML document","slug":"command-generate-plain-text-table-from-xml-document"},{"level":3,"title":"Command: Generate plain text table from XML document","slug":"command-generate-plain-text-table-from-xml-document-1"},{"level":3,"title":"Command: Generate plain text table from XML document","slug":"command-generate-plain-text-table-from-xml-document-2"},{"level":3,"title":"Command: Select from XML document containing unicode characters","slug":"command-select-from-xml-document-containing-unicode-characters"},{"level":3,"title":"Command: Update value of an attribute","slug":"command-update-value-of-an-attribute"},{"level":3,"title":"Command: Update value of an element","slug":"command-update-value-of-an-element"},{"level":3,"title":"Command: Validate XML documents using well-formedness/DTD/XSD/RelaxNG checks","slug":"command-validate-xml-documents-using-well-formedness-dtd-xsd-relaxng-checks"},{"level":3,"title":"Command: Include one XML document into another using XInclude","slug":"command-include-one-xml-document-into-another-using-xinclude"},{"level":3,"title":"Command: Passing parameters to XSLT stylesheet","slug":"command-passing-parameters-to-xslt-stylesheet"},{"level":3,"title":"Command: Applying XSLT stylesheet to XML document","slug":"command-applying-xslt-stylesheet-to-xml-document"}],"relativePath":"blog/xmlstar.md","lastUpdated":1628440207828}',a={},o=l('<p>XMLSTARLET USER&#39;S GUIDE see also <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a></p><ol><li>BASIC COMMAND LINE OPTIONS</li></ol><p>====================================================</p><p>XMLStarlet Toolkit: Command line utilities for XML</p><div class="language-"><pre><code>Usage: xml [&lt;options&gt;] &lt;command&gt; [&lt;cmd-options&gt;]\nwhere &lt;command&gt; is one of:\n   ed    (or edit)      - Edit/Update XML document(s)\n   sel   (or select)    - Select data or query XML document(s) (XPATH, etc)\n   tr    (or transform) - Transform XML document(s) using XSLT\n   val   (or validate)  - Validate XML document(s) (well-formed/DTD/XSD/RelaxNG)\n   fo    (or format)    - Format XML document(s)\n   el    (or elements)  - Display element structure of XML document\n   c14n  (or canonic)   - XML canonicalization\n   ls    (or list)      - List directory as XML\n   esc   (or escape)    - Escape special XML characters\n   unesc (or unescape)  - Unescape special XML characters\n   pyx   (or xmln)      - Convert XML into PYX format (based on ESIS - ISO 8879)\n   p2x   (or depyx)     - Convert PYX into XML\n&lt;options&gt; are:\n   --version            - show version\n   --help               - show help\nWherever file name mentioned in command help it is assumed\nthat URL can be used instead as well.\n\nType: xml &lt;command&gt; --help &lt;ENTER&gt; for command help\n</code></pre></div><ol start="2"><li>Select/Query XML documents</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml sel --help\nXMLStarlet Toolkit: Select from XML document(s)\nUsage: xml sel &lt;global-options&gt; {&lt;template&gt;} [ &lt;xml-file&gt; ... ]\nwhere\n  &lt;global-options&gt; - global options for selecting\n  &lt;xml-file&gt; - input XML document file name/uri (stdin is used if missing)\n  &lt;template&gt; - template for querying XML document with following syntax:\n\n&lt;global-options&gt; are:\n  -C or --comp       - display generated XSLT\n  -R or --root       - print root element &lt;xsl-select&gt;\n  -T or --text       - output is text (default is XML)\n  -I or --indent     - indent output\n  -D or --xml-decl   - do not omit xml declaration line\n  -B or --noblanks   - remove insignificant spaces from XML tree\n  -N &lt;name&gt;=&lt;value&gt;  - predefine namespaces (name without &#39;xmlns:&#39;)\n                       ex: xsql=urn:oracle-xsql\n                       Multiple -N options are allowed.\n  --net              - allow fetch DTDs or entities over network\n  --help             - display help\n\nSyntax for templates: -t|--template &lt;options&gt;\nwhere &lt;options&gt;\n  -c or --copy-of &lt;xpath&gt;  - print copy of XPATH expression\n  -v or --value-of &lt;xpath&gt; - print value of XPATH expression\n  -o or --output &lt;string&gt;  - output string literal\n  -n or --nl               - print new line\n  -f or --inp-name         - print input file name (or URL)\n  -m or --match &lt;xpath&gt;    - match XPATH expression\n  -i or --if &lt;test-xpath&gt;  - check condition &lt;xsl:if test=&quot;test-xpath&quot;&gt;\n  -e or --elem &lt;name&gt;      - print out element &lt;xsl:element name=&quot;name&quot;&gt;\n  -a or --attr &lt;name&gt;      - add attribute &lt;xsl:attribute name=&quot;name&quot;&gt;\n  -b or --break            - break nesting\n  -s or --sort op xpath    - sort in order (used after -m) where\n  op is X:Y:Z, \n      X is A - for order=&quot;ascending&quot;\n      X is D - for order=&quot;descending&quot;\n      Y is N - for data-type=&quot;numeric&quot;\n      Y is T - for data-type=&quot;text&quot;\n      Z is U - for case-order=&quot;upper-first&quot;\n      Z is L - for case-order=&quot;lower-first&quot;\n\nThere can be multiple --match, --copy-of, --value-of, etc options\nin a single template. The effect of applying command line templates\ncan be illustrated with the following XSLT analogue\n\nxml sel -t -c &quot;xpath0&quot; -m &quot;xpath1&quot; -m &quot;xpath2&quot; -v &quot;xpath3&quot; \\\n        -t -m &quot;xpath4&quot; -c &quot;xpath5&quot;\n\nis equivalent to applying the following XSLT\n\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\n&lt;xsl:template match=&quot;/&quot;&gt;\n  &lt;xsl:call-template name=&quot;t1&quot;/&gt;\n  &lt;xsl:call-template name=&quot;t2&quot;/&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template name=&quot;t1&quot;&gt;\n  &lt;xsl:copy-of select=&quot;xpath0&quot;/&gt;\n  &lt;xsl:for-each select=&quot;xpath1&quot;&gt;\n    &lt;xsl:for-each select=&quot;xpath2&quot;&gt;\n      &lt;xsl:value-of select=&quot;xpath3&quot;/&gt;\n    &lt;/xsl:for-each&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template name=&quot;t2&quot;&gt;\n  &lt;xsl:for-each select=&quot;xpath4&quot;&gt;\n    &lt;xsl:copy-of select=&quot;xpath5&quot;/&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><p>Current implementation uses libxslt from GNOME codebase as XSLT processor (see <a href="http://xmlsoft.org/" target="_blank" rel="noopener noreferrer">http://xmlsoft.org/</a> for more details)</p><ol start="3"><li>Editing XML documents</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml ed --help\nXMLStarlet Toolkit: Edit XML document(s)\nUsage: xml ed &lt;global-options&gt; {&lt;action&gt;} [ &lt;xml-file-or-uri&gt; ... ]\nwhere\n  &lt;global-options&gt;  - global options for editing\n  &lt;xml-file-or-uri&gt; - input XML document file name/uri (stdin is used if missing)\n\n&lt;global-options&gt; are:\n  -P (or --pf)        - preserve original formatting\n  -S (or --ps)        - preserve non-significant spaces\n  -O (or --omit-decl) - omit XML declaration (&lt;?xml ...?&gt;)\n  -N &lt;name&gt;=&lt;value&gt;   - predefine namespaces (name without &#39;xmlns:&#39;)\n                        ex: xsql=urn:oracle-xsql\n                        Multiple -N options are allowed.\n                        -N options must be last global options.\n  --help or -h        - display help\n\nwhere &lt;action&gt;\n   -d or --delete &lt;xpath&gt;\n   -i or --insert &lt;xpath&gt; -t (--type) elem|text|attr -n &lt;name&gt; -v (--value) &lt;value&gt;\n   -a or --append &lt;xpath&gt; -t (--type) elem|text|attr -n &lt;name&gt; -v (--value) &lt;value&gt;\n   -s or --subnode &lt;xpath&gt; -t (--type) elem|text|attr -n &lt;name&gt; -v (--value) &lt;value&gt;\n   -m or --move &lt;xpath1&gt; &lt;xpath2&gt;\n   -r or --rename &lt;xpath1&gt; -v &lt;new-name&gt;\n   -u or --update &lt;xpath&gt; -v (--value) &lt;value&gt;\n\t\t\t  -x (--expr) &lt;xpath&gt; (-x is not implemented yet)\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="4"><li>Using XSLT to transform XML documents</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml tr --help\nXMLStarlet Toolkit: Transform XML document(s) using XSLT\nUsage: xml tr [&lt;options&gt;] &lt;xsl-file&gt; {-p|-s &lt;name&gt;=&lt;value&gt;} [ &lt;xml-file-or-uri&gt; ... ]\nwhere\n   &lt;xsl-file&gt;      - main XSLT stylesheet for transformation\n   &lt;xml-file&gt;      - input XML document file name (stdin is used if missing)\n   &lt;name&gt;=&lt;value&gt;  - name and value of the parameter passed to XSLT processor\n   -p              - parameter is XPATH expression (&quot;&#39;string&#39;&quot; to quote string)\n   -s              - parameter is a string literal\n&lt;options&gt; are:\n   --omit-decl     - omit xml declaration &lt;?xml version=&quot;1.0&quot;?&gt;\n   --show-ext      - show list of extensions\n   --val           - allow validate against DTDs or schemas\n   --net           - allow fetch DTDs or entities over network\n   --xinclude      - do XInclude processing on document input\n   --maxdepth val  - increase the maximum depth\n   --html          - input document(s) is(are) in HTML format\n   --docbook       - input document(s) is(are) in SGML docbook format\n   --catalogs      - use SGML catalogs from $SGML_CATALOG_FILES\n                     otherwise XML catalogs starting from\n                     file:///etc/xml/catalog are activated by default\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><p>Current implementation uses libxslt from GNOME codebase as XSLT processor (see <a href="http://xmlsoft.org/" target="_blank" rel="noopener noreferrer">http://xmlsoft.org/</a> for more details)</p><ol start="5"><li>Formatting XML documents</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml fo --help\nXMLStarlet Toolkit: Format XML document\nUsage: xml fo [&lt;options&gt;] &lt;xml-file&gt;\nwhere &lt;options&gt; are\n   -n or --noindent            - do not indent\n   -t or --indent-tab          - indent output with tabulation\n   -s or --indent-spaces &lt;num&gt; - indent output with &lt;num&gt; spaces\n   -o or --omit-decl           - omit xml declaration &lt;?xml version=&quot;1.0&quot;?&gt;\n   -R or --recover             - try to recover what is parsable\n   -D or --dropdtd             - remove the DOCTYPE of the input docs\n   -C or --nocdata             - replace cdata section with text nodes\n   -N or --nsclean             - remove redundant namespace declarations\n   -e or --encode &lt;encoding&gt;   - output in the given encoding (utf-8, unicode...)\n   -H or --html                - input is HTML\n   -h or --help                - print help\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="6"><li>Validating XML documents</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml val --help\nXMLStarlet Toolkit: Validate XML document(s)\nUsage: xml val &lt;options&gt; [ &lt;xml-file-or-uri&gt; ... ]\nwhere &lt;options&gt;\n   -w or --well-formed        - validate well-formedness only (default)\n   -d or --dtd &lt;dtd-file&gt;     - validate against DTD\n   -s or --xsd &lt;xsd-file&gt;     - validate against XSD schema\n   -r or --relaxng &lt;rng-file&gt; - validate against Relax-NG schema\n   -e or --err                - print verbose error messages on stderr\n   -b or --list-bad           - list only files which do not validate\n   -g or --list-good          - list only files which validate\n   -q or --quiet              - do not list files (return result code only)\n</code></pre></div><p>NOTE: XML Schemas are not fully supported yet due to its incomplete support in libxml (see <a href="http://xmlsoft.org" target="_blank" rel="noopener noreferrer">http://xmlsoft.org</a>)</p><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="7"><li>Displaying structure of XML documents</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml el --help\nXMLStarlet Toolkit: Display element structure of XML document\nUsage: xml el [&lt;options&gt;] &lt;xml-file&gt;\nwhere\n   &lt;xml-file&gt; - input XML document file name (stdin is used if missing)\n   &lt;options&gt;:\n   -a  - show attributes as well\n   -v  - show attributes and their values\n   -u  - print out sorted unique lines\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="8"><li>Escape/Unescape special XML characters</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml esc --help\nXMLStarlet Toolkit: Escape special XML characters\nUsage: xml esc [&lt;options&gt;] [&lt;string&gt;]\nwhere &lt;options&gt; are\n   --help      - print usage\n   (TODO: more to be added in future)\nif &lt;string&gt; is missing stdin is used instead.\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="9"><li>List directory as XML</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml ls --help\nXMLStarlet Toolkit: List directory as XML\nUsage: xml ls\nLists current directory in XML format.\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="10"><li>XML canonicalization</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml c14n --help\nXMLStarlet Toolkit: XML canonicalization\nUsage: xml c14n &lt;mode&gt; &lt;xml-file&gt; [&lt;xpath-file&gt;] [&lt;inclusive-ns-list&gt;]\nwhere\n  &lt;xml-file&gt;   - input XML document file name (stdin is used if &#39;-&#39;)\n  &lt;xpath-file&gt; - XML file containing XPath expression for\n                 exclusive XML canonicalization\n    Example:\n    &lt;?xml version=&quot;1.0&quot;?&gt;\n    &lt;XPath xmlns:n0=&quot;http://a.example.com&quot; xmlns:n1=&quot;http://b.example&quot;&gt;\n    (//. | //@* | //namespace::*)[ancestor-or-self::n1:elem1]\n    &lt;/XPath&gt;\n\n  &lt;mode&gt; is one of following:\n  --with-comments         XML file canonicalization w comments (default)\n  --without-comments      XML file canonicalization w/o comments\n  --exc-with-comments     Exclusive XML file canonicalization w comments\n  --exc-without-comments  Exclusive XML file canonicalization w/o comments\n</code></pre></div><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="11"><li>Convert XML into PYX format (based on ESIS - ISO 8879)</li></ol><p>====================================================</p><div class="language-"><pre><code>\nxml pyx --help\nXMLStarlet Toolkit: Convert XML into PYX format (based on ESIS - ISO 8879)\nUsage: xml pyx {&lt;xml-file&gt;}\nwhere\n   &lt;xml-file&gt; - input XML document file name (stdin is used if missing)\n</code></pre></div><p>The PYX format is a line-oriented representation of XML documents that is derived from the SGML ESIS format. (see ESIS - ISO 8879 Element Structure Information Set spec, ISO/IEC JTC1/SC18/WG8 N931 (ESIS))</p><p>A non-validating, ESIS generating tool originally developed for pyxie project (see <a href="http://pyxie.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://pyxie.sourceforge.net/</a>) ESIS Generation by Sean Mc Grath <a href="http://www.digitome.com/sean.html" target="_blank" rel="noopener noreferrer">http://www.digitome.com/sean.html</a></p><p>XMLStarlet is a command line toolkit to query/edit/check/transform XML documents (for more information see <a href="http://xmlstar.sourceforge.net/" target="_blank" rel="noopener noreferrer">http://xmlstar.sourceforge.net/</a>)</p><ol start="12"><li>Examples:</li></ol><p>====================================================</p><div class="language-"><pre><code>\nInput1\nexamples/xml/table.xml\n\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n  &lt;table&gt;\n    &lt;rec id=&quot;1&quot;&gt;\n      &lt;numField&gt;123&lt;/numField&gt;\n      &lt;stringField&gt;String Value&lt;/stringField&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;2&quot;&gt;\n      &lt;numField&gt;346&lt;/numField&gt;\n      &lt;stringField&gt;Text Value&lt;/stringField&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;3&quot;&gt;\n      &lt;numField&gt;-23&lt;/numField&gt;\n      &lt;stringField&gt;stringValue&lt;/stringField&gt;\n    &lt;/rec&gt;\n  &lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><p>Input2 examples/xml/tab-obj.xml</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n  &lt;table&gt;\n    &lt;rec id=&quot;1&quot;&gt;\n      &lt;numField&gt;123&lt;/numField&gt;\n      &lt;stringField&gt;String Value&lt;/stringField&gt;\n      &lt;object name=&quot;Obj1&quot;&gt;\n        &lt;property name=&quot;size&quot;&gt;10&lt;/property&gt;\n        &lt;property name=&quot;type&quot;&gt;Data&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;2&quot;&gt;\n      &lt;numField&gt;346&lt;/numField&gt;\n      &lt;stringField&gt;Text Value&lt;/stringField&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;3&quot;&gt;\n      &lt;numField&gt;-23&lt;/numField&gt;\n      &lt;stringField&gt;stringValue&lt;/stringField&gt;\n    &lt;/rec&gt;\n  &lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><p>Input3 examples/html/hello1.html</p><div class="language-"><pre><code>&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Hello World&lt;/title&gt;\n  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div align=&quot;center&quot;&gt;Hello World!&lt;br&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></div><p>Input4 examples/sgml/docbook1.sgml</p><div class="language-"><pre><code>&lt;!DOCTYPE book\n  PUBLIC &quot;-//OASIS//DTD DocBook XML V4.1.2//EN&quot;\n  &quot;http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd&quot;&gt;\n&lt;book&gt;\n\n &lt;bookinfo&gt;\n  &lt;title&gt;DocBook document example&lt;/title&gt;\n  &lt;author&gt;\n   &lt;firstname&gt;Mikhail&lt;/firstname&gt;\n   &lt;surname&gt;Grushinskiy&lt;/surname&gt;\n  &lt;/author&gt;\n\n  &lt;copyright&gt;\n   &lt;year&gt;2002&lt;/year&gt;\n   &lt;holder&gt;Mikhail Grushinskiy&lt;/holder&gt;\n  &lt;/copyright&gt;\n &lt;/bookinfo&gt;\n\n &lt;preface&gt;\n  &lt;title&gt;Sample document&lt;/title&gt;\n\n  &lt;para&gt;A simple DocBook example document.&lt;/para&gt;\n &lt;/preface&gt;\n\n &lt;chapter&gt;\n  &lt;title&gt;XMLStarlet Example&lt;/title&gt;\n\n  &lt;para&gt;The &lt;emphasis&gt;XMLStarlet&lt;/emphasis&gt; command line toolkit\n  allows querying/checking/editing/transforming/formatting XML documents\n  from command line&lt;/para&gt;\n\n  &lt;para&gt;To find out more on how to use the\n  &lt;emphasis&gt;XMLStarlet&lt;/emphasis&gt; for XML processing, point\n  your browser to &lt;ulink\n  url=&quot;http://xmlstar.sourceforge.net/&quot;&gt;http://xmlstar.sourceforge.net/&lt;/ulink&gt;.\n  &lt;/para&gt;\n\n &lt;/chapter&gt;\n\n&lt;/book&gt;\n</code></pre></div><p>Stylesheet1 examples/xsl/sum1.xsl</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\n&lt;xsl:output method=&quot;text&quot;/&gt;\n&lt;xsl:param name=&quot;inputFile&quot;&gt;-&lt;/xsl:param&gt;\n&lt;xsl:template match=&quot;/&quot;&gt;\n  &lt;xsl:call-template name=&quot;t1&quot;/&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template name=&quot;t1&quot;&gt;\n  &lt;xsl:value-of select=&quot;sum(/xml/table/rec/numField)&quot;/&gt;\n  &lt;xsl:value-of select=&quot;&#39;&amp;#10;&#39;&quot;/&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre></div><p>Stylesheet2 examples/xsl/hello1.xsl</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\n&lt;xsl:output method=&quot;text&quot;/&gt;\n&lt;xsl:param name=&quot;inputFile&quot;&gt;-&lt;/xsl:param&gt;\n&lt;xsl:template match=&quot;/&quot;&gt;\n  &lt;xsl:call-template name=&quot;t1&quot;/&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template name=&quot;t1&quot;&gt;\n  &lt;xsl:for-each select=&quot;/&quot;&gt;\n    &lt;xsl:value-of select=&quot;/html/body/div&quot;/&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre></div><p>Stylesheet3 examples/xsl/param1.xsl</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\n&lt;xsl:output method=&quot;text&quot;/&gt;\n&lt;xsl:param name=&quot;Text&quot;/&gt;\n&lt;xsl:param name=&quot;Count&quot;/&gt;\n&lt;xsl:template match=&quot;/&quot;&gt;\n  &lt;xsl:call-template name=&quot;t1&quot;/&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template name=&quot;t1&quot;&gt;\n  &lt;xsl:for-each select=&quot;/xml&quot;&gt;\n    &lt;xsl:value-of select=&quot;$Text&quot;/&gt;\n    &lt;xsl:value-of select=&quot;$Count&quot;/&gt;\n    &lt;xsl:value-of select=&quot;&#39;&amp;#10;&#39;&quot;/&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre></div><h3 id="command-xml-canonicalization"><a class="header-anchor" href="#command-xml-canonicalization" aria-hidden="true">#</a> Command: XML canonicalization</h3><div class="language-"><pre><code>xml c14n --with-comments ../examples/xml/structure.xml ; echo $?\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;a1&gt;\n  &lt;a11&gt;\n    &lt;a111&gt;\n      &lt;a1111&gt;&lt;/a1111&gt;\n    &lt;/a111&gt;\n    &lt;a112&gt;\n      &lt;a1121&gt;&lt;/a1121&gt;\n    &lt;/a112&gt;\n  &lt;/a11&gt;\n  &lt;a12&gt;&lt;/a12&gt;\n  &lt;a13&gt;\n    &lt;a131&gt;&lt;/a131&gt;\n  &lt;/a13&gt;\n&lt;/a1&gt;\n0\n</code></pre></div><p>Command:</p><div class="language-"><pre><code># XML exclusive canonicalization\nxml c14n --exc-with-comments ../examples/xml/c14n.xml ../examples/xml/c14n.xpath\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;n1:elem1 xmlns:n1=&quot;http://b.example&quot;&gt;\ncontent\n&lt;/n1:elem1&gt;\n</code></pre></div><h3 id="command-count-elements-matching-xpath-expression"><a class="header-anchor" href="#command-count-elements-matching-xpath-expression" aria-hidden="true">#</a> Command: Count elements matching XPath expression</h3><div class="language-"><pre><code>xml sel -t -v &quot;count(/xml/table/rec/numField)&quot; xml/table.xml\n\n</code></pre></div><p>Result Output: 3</p><h3 id="command-count-all-nodes-in-xml-document"><a class="header-anchor" href="#command-count-all-nodes-in-xml-document" aria-hidden="true">#</a> Command: Count all nodes in XML document</h3><div class="language-"><pre><code>xml sel -t -f -o &quot; &quot; -v &quot;count(//node())&quot; xml/table.xml xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>xml/table.xml 32\nxml/tab-obj.xml 41\n</code></pre></div><h3 id="command-delete-elements-matching-xpath-expression"><a class="header-anchor" href="#command-delete-elements-matching-xpath-expression" aria-hidden="true">#</a> Command: Delete elements matching XPath expression</h3><div class="language-"><pre><code>xml ed -d /xml/table/rec[@id=&#39;2&#39;] xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n  &lt;table&gt;\n    &lt;rec id=&quot;1&quot;&gt;\n      &lt;numField&gt;123&lt;/numField&gt;\n      &lt;stringField&gt;String Value&lt;/stringField&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;3&quot;&gt;\n      &lt;numField&gt;-23&lt;/numField&gt;\n      &lt;stringField&gt;stringValue&lt;/stringField&gt;\n    &lt;/rec&gt;\n  &lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><h3 id="command-generate-html-from-given-sgml-docbook-document"><a class="header-anchor" href="#command-generate-html-from-given-sgml-docbook-document" aria-hidden="true">#</a> Command: Generate HTML from given SGML docbook document</h3><div class="language-"><pre><code>xml tr --omit-decl --docbook /usr/share/sgml/docbook/yelp/docbook/html/docbook.xsl  sgml/docbook1.sgml | \\\n    xml fo --html --indent-spaces 2\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; standalone=&quot;yes&quot;?&gt;\n&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta content=&quot;text/html; charset=ISO-8859-1&quot; http-equiv=&quot;Content-Type&quot;/&gt;\n    &lt;title&gt;DocBook document example&lt;/title&gt;\n    &lt;meta name=&quot;generator&quot; content=&quot;DocBook XSL Stylesheets V1.48&quot;/&gt;\n  &lt;/head&gt;\n  &lt;body bgcolor=&quot;white&quot; text=&quot;black&quot; link=&quot;#0000FF&quot; vlink=&quot;#840084&quot; alink=&quot;#0000FF&quot;&gt;\n    &lt;div class=&quot;book&quot;&gt;\n      &lt;div class=&quot;titlepage&quot;&gt;\n        &lt;div&gt;\n          &lt;h1 class=&quot;title&quot;&gt;&lt;a name=&quot;id2765244&quot;/&gt;DocBook document example&lt;/h1&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;h3 class=&quot;author&quot;&gt;Mikhail Grushinskiy&lt;/h3&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;p class=&quot;copyright&quot;&gt;Copyright © 2002 Mikhail Grushinskiy&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;hr/&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;toc&quot;&gt;\n        &lt;p&gt;\n          &lt;b&gt;Table of Contents&lt;/b&gt;\n        &lt;/p&gt;\n        &lt;dl&gt;\n          &lt;dt&gt;\n            &lt;a href=&quot;#id2765482&quot;&gt;Sample document&lt;/a&gt;\n          &lt;/dt&gt;\n          &lt;dt&gt;1. &lt;a href=&quot;#id2767329&quot;&gt;XMLStarlet Example&lt;/a&gt;&lt;/dt&gt;\n        &lt;/dl&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;preface&quot;&gt;\n        &lt;div class=&quot;titlepage&quot;&gt;\n          &lt;div&gt;\n            &lt;h2 class=&quot;title&quot;&gt;&lt;a name=&quot;id2765482&quot;/&gt;Sample document&lt;/h2&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;p&gt;A simple DocBook example document.&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=&quot;chapter&quot;&gt;\n        &lt;div class=&quot;titlepage&quot;&gt;\n          &lt;div&gt;\n            &lt;h2 class=&quot;title&quot;&gt;&lt;a name=&quot;id2767329&quot;/&gt;Chapter 1. XMLStarlet Example&lt;/h2&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;p&gt;The &lt;span class=&quot;emphasis&quot;&gt;&lt;i&gt;XMLStarlet&lt;/i&gt;&lt;/span&gt; command line toolkit\n  allows querying/checking/editing/transforming/formatting XML documents\n  from command line&lt;/p&gt;\n        &lt;p&gt;To find out more on how to use the\n  &lt;span class=&quot;emphasis&quot;&gt;&lt;i&gt;XMLStarlet&lt;/i&gt;&lt;/span&gt; for XML processing, point\n  your browser to &lt;a href=&quot;http://xmlstar.sourceforge.net/&quot; target=&quot;_top&quot;&gt;http://xmlstar.sourceforge.net/&lt;/a&gt;.\n  &lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre></div><h3 id="command-validate-xml-document-against-dtd"><a class="header-anchor" href="#command-validate-xml-document-against-dtd" aria-hidden="true">#</a> Command: Validate XML document against DTD</h3><div class="language-"><pre><code>xml val --dtd dtd/table.dtd xml/tab-obj.xml &gt;/dev/null 2&gt;&amp;1; echo $?\n</code></pre></div><p>Result Output: 1</p><h3 id="command-validate-xml-document-against-dtd-1"><a class="header-anchor" href="#command-validate-xml-document-against-dtd-1" aria-hidden="true">#</a> Command: Validate XML document against DTD</h3><div class="language-"><pre><code>xml val --dtd dtd/table.dtd xml/table.xml &gt;/dev/null 2&gt;&amp;1; echo $?\n</code></pre></div><p>Result Output: 0</p><h3 id="command-validate-xml-document-against-dtd-2"><a class="header-anchor" href="#command-validate-xml-document-against-dtd-2" aria-hidden="true">#</a> Command: Validate XML document against DTD</h3><div class="language-"><pre><code>xml val --dtd xml/foo.dtd xml/foo.xml 2&gt;/dev/null\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>xml/foo.xml - invalid\n</code></pre></div><h3 id="command-display-element-structure-of-xml-document"><a class="header-anchor" href="#command-display-element-structure-of-xml-document" aria-hidden="true">#</a> Command: Display element structure of XML document</h3><div class="language-"><pre><code>xml el ./xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>xml\nxml/table\nxml/table/rec\nxml/table/rec/numField\nxml/table/rec/stringField\nxml/table/rec/object\nxml/table/rec/object/property\nxml/table/rec/object/property\nxml/table/rec\nxml/table/rec/numField\nxml/table/rec/stringField\nxml/table/rec\nxml/table/rec/numField\nxml/table/rec/stringField\n</code></pre></div><h3 id="command-display-element-structure-of-xml-document-including-attributes"><a class="header-anchor" href="#command-display-element-structure-of-xml-document-including-attributes" aria-hidden="true">#</a> Command: Display element structure of XML document (including attributes)</h3><div class="language-"><pre><code>xml el -a ./xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>xml\nxml/table\nxml/table/rec\nxml/table/rec/@id\nxml/table/rec/numField\nxml/table/rec/stringField\nxml/table/rec/object\nxml/table/rec/object/@name\nxml/table/rec/object/property\nxml/table/rec/object/property/@name\nxml/table/rec/object/property\nxml/table/rec/object/property/@name\nxml/table/rec\nxml/table/rec/@id\nxml/table/rec/numField\nxml/table/rec/stringField\nxml/table/rec\nxml/table/rec/@id\nxml/table/rec/numField\nxml/table/rec/stringField\n</code></pre></div><h3 id="command-display-element-structure-of-xml-document-including-attribute-values"><a class="header-anchor" href="#command-display-element-structure-of-xml-document-including-attribute-values" aria-hidden="true">#</a> Command: Display element structure of XML document (including attribute values)</h3><div class="language-"><pre><code>xml el -v ./xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>xml\nxml/table\nxml/table/rec[@id=&#39;1&#39;]\nxml/table/rec/numField\nxml/table/rec/stringField\nxml/table/rec/object[@name=&#39;Obj1&#39;]\nxml/table/rec/object/property[@name=&#39;size&#39;]\nxml/table/rec/object/property[@name=&#39;type&#39;]\nxml/table/rec[@id=&#39;2&#39;]\nxml/table/rec/numField\nxml/table/rec/stringField\nxml/table/rec[@id=&#39;3&#39;]\nxml/table/rec/numField\nxml/table/rec/stringField\n</code></pre></div><h3 id="command-escape-special-xml-characters"><a class="header-anchor" href="#command-escape-special-xml-characters" aria-hidden="true">#</a> Command: Escape special XML characters</h3><div class="language-"><pre><code>cat xml/structure.xml | xml esc\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&amp;lt;a1&amp;gt;\n  &amp;lt;a11&amp;gt;\n    &amp;lt;a111&amp;gt;\n      &amp;lt;a1111/&amp;gt;\n    &amp;lt;/a111&amp;gt;\n    &amp;lt;a112&amp;gt;\n      &amp;lt;a1121/&amp;gt;\n    &amp;lt;/a112&amp;gt;\n  &amp;lt;/a11&amp;gt;\n  &amp;lt;a12/&amp;gt;\n  &amp;lt;a13&amp;gt;\n    &amp;lt;a131/&amp;gt;\n  &amp;lt;/a13&amp;gt;\n&amp;lt;/a1&amp;gt;\n</code></pre></div><h3 id="command-calculate-exslt-xslt-extentions-xpath-value"><a class="header-anchor" href="#command-calculate-exslt-xslt-extentions-xpath-value" aria-hidden="true">#</a> Command: Calculate EXSLT (XSLT extentions) XPath value</h3><div class="language-"><pre><code>echo &quot;&lt;x/&gt;&quot; | xml sel -t -v &quot;math:abs(-1000)&quot;\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>1000\n</code></pre></div><h3 id="command-find-xml-files-matching-xpath-expression-containing-object-element"><a class="header-anchor" href="#command-find-xml-files-matching-xpath-expression-containing-object-element" aria-hidden="true">#</a> Command: Find XML files matching XPath expression (containing &#39;object&#39; element)</h3><div class="language-"><pre><code>xml sel -t -m //object -f xml/table.xml xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>xml/tab-obj.xml\n</code></pre></div><h3 id="command-generate-xml-document-using-command-line-xml-sel"><a class="header-anchor" href="#command-generate-xml-document-using-command-line-xml-sel" aria-hidden="true">#</a> Command: Generate XML document using command line xml sel</h3><div class="language-"><pre><code>echo &quot;&lt;x/&gt;&quot; | xml sel -t -m / -e xml -e child -a data -o value\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;xml&gt;&lt;child data=&quot;value&quot;/&gt;&lt;/xml&gt;\n</code></pre></div><h3 id="command-apply-xslt-stylesheet-to-html-input-file"><a class="header-anchor" href="#command-apply-xslt-stylesheet-to-html-input-file" aria-hidden="true">#</a> Command: Apply XSLT stylesheet to HTML input file</h3><div class="language-"><pre><code>xml tr --html xsl/hello1.xsl html/hello1.html\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>Hello World!\n</code></pre></div><h3 id="command-use-local-name-xslt-function-in-xpath-expression"><a class="header-anchor" href="#command-use-local-name-xslt-function-in-xpath-expression" aria-hidden="true">#</a> Command: Use local-name() XSLT function in XPath expression</h3><div class="language-"><pre><code>xml sel -t -v &quot;//*[local-name()=&#39;query&#39;]&quot; xsql/jobserve.xsql\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>  SELECT substr(title,1,26) short_title, title, location, skills\n  FROM job\n  WHERE UPPER(title) LIKE &#39;%ORACLE%&#39;\n  ORDER BY first_posted DESC\n</code></pre></div><h3 id="command-select-text-value-of-an-xml-element-mathing-given-xpath-expression"><a class="header-anchor" href="#command-select-text-value-of-an-xml-element-mathing-given-xpath-expression" aria-hidden="true">#</a> Command: Select text value of an XML element mathing given XPath expression</h3><div class="language-"><pre><code>xml sel -t -m &quot;/xml/table/rec[@id=&#39;2&#39;]&quot; -v numField xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>346\n</code></pre></div><h3 id="command-move-element-node"><a class="header-anchor" href="#command-move-element-node" aria-hidden="true">#</a> Command: Move element node</h3><div class="language-"><pre><code>echo &#39;&lt;x id=&quot;1&quot;&gt;&lt;a/&gt;&lt;b/&gt;&lt;/x&gt;&#39; | xml ed -m &quot;//b&quot; &quot;//a&quot;\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;x id=&quot;1&quot;&gt;\n  &lt;a&gt;\n    &lt;b/&gt;\n  &lt;/a&gt;\n&lt;/x&gt;\n</code></pre></div><h3 id="command-format-xml-document-disabling-indent"><a class="header-anchor" href="#command-format-xml-document-disabling-indent" aria-hidden="true">#</a> Command: Format XML document disabling indent</h3><div class="language-"><pre><code>cat xml/tab-obj.xml | xml fo --noindent \n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n&lt;table&gt;\n&lt;rec id=&quot;1&quot;&gt;\n&lt;numField&gt;123&lt;/numField&gt;\n&lt;stringField&gt;String Value&lt;/stringField&gt;\n&lt;object name=&quot;Obj1&quot;&gt;\n&lt;property name=&quot;size&quot;&gt;10&lt;/property&gt;\n&lt;property name=&quot;type&quot;&gt;Data&lt;/property&gt;\n&lt;/object&gt;\n&lt;/rec&gt;\n&lt;rec id=&quot;2&quot;&gt;\n&lt;numField&gt;346&lt;/numField&gt;\n&lt;stringField&gt;Text Value&lt;/stringField&gt;\n&lt;/rec&gt;\n&lt;rec id=&quot;3&quot;&gt;\n&lt;numField&gt;-23&lt;/numField&gt;\n&lt;stringField&gt;stringValue&lt;/stringField&gt;\n&lt;/rec&gt;\n&lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><h3 id="command-predefine-namespaces-for-xpath-expressions"><a class="header-anchor" href="#command-predefine-namespaces-for-xpath-expressions" aria-hidden="true">#</a> Command: Predefine namespaces for XPath expressions</h3><div class="language-"><pre><code>xml sel -N xsql=urn:oracle-xsql -t -v /xsql:query xsql/jobserve.xsql\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>  SELECT substr(title,1,26) short_title, title, location, skills\n  FROM job\n  WHERE UPPER(title) LIKE &#39;%ORACLE%&#39;\n  ORDER BY first_posted DESC\n</code></pre></div><h3 id="command-recover-malformed-xml-document"><a class="header-anchor" href="#command-recover-malformed-xml-document" aria-hidden="true">#</a> Command: Recover malformed XML document</h3><div class="language-"><pre><code>xml fo -R xml/malformed.xml 2&gt;/dev/null\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;test_output&gt;\n  &lt;test_name&gt;foo&lt;/test_name&gt;\n  &lt;subtest&gt;...&lt;/subtest&gt;\n&lt;/test_output&gt;\n</code></pre></div><h3 id="command-rename-attributes"><a class="header-anchor" href="#command-rename-attributes" aria-hidden="true">#</a> Command: Rename attributes</h3><div class="language-"><pre><code>xml ed -r &quot;//*/@id&quot; -v ID xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n  &lt;table&gt;\n    &lt;rec ID=&quot;1&quot;&gt;\n      &lt;numField&gt;123&lt;/numField&gt;\n      &lt;stringField&gt;String Value&lt;/stringField&gt;\n      &lt;object name=&quot;Obj1&quot;&gt;\n        &lt;property name=&quot;size&quot;&gt;10&lt;/property&gt;\n        &lt;property name=&quot;type&quot;&gt;Data&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/rec&gt;\n    &lt;rec ID=&quot;2&quot;&gt;\n      &lt;numField&gt;346&lt;/numField&gt;\n      &lt;stringField&gt;Text Value&lt;/stringField&gt;\n    &lt;/rec&gt;\n    &lt;rec ID=&quot;3&quot;&gt;\n      &lt;numField&gt;-23&lt;/numField&gt;\n      &lt;stringField&gt;stringValue&lt;/stringField&gt;\n    &lt;/rec&gt;\n  &lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><h3 id="command-rename-elements"><a class="header-anchor" href="#command-rename-elements" aria-hidden="true">#</a> Command: Rename elements</h3><div class="language-"><pre><code>xml ed -r &quot;/xml/table/rec&quot; -v record xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n  &lt;table&gt;\n    &lt;record id=&quot;1&quot;&gt;\n      &lt;numField&gt;123&lt;/numField&gt;\n      &lt;stringField&gt;String Value&lt;/stringField&gt;\n      &lt;object name=&quot;Obj1&quot;&gt;\n        &lt;property name=&quot;size&quot;&gt;10&lt;/property&gt;\n        &lt;property name=&quot;type&quot;&gt;Data&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/record&gt;\n    &lt;record id=&quot;2&quot;&gt;\n      &lt;numField&gt;346&lt;/numField&gt;\n      &lt;stringField&gt;Text Value&lt;/stringField&gt;\n    &lt;/record&gt;\n    &lt;record id=&quot;3&quot;&gt;\n      &lt;numField&gt;-23&lt;/numField&gt;\n      &lt;stringField&gt;stringValue&lt;/stringField&gt;\n    &lt;/record&gt;\n  &lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><h3 id="command-validate-against-xsd-schema"><a class="header-anchor" href="#command-validate-against-xsd-schema" aria-hidden="true">#</a> Command: Validate against XSD schema</h3><div class="language-"><pre><code>xml val -b -s xsd/table.xsd xml/table.xml xml/tab-obj.xml 2&gt;/dev/null; echo $?\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>xml/tab-obj.xml\n1\n</code></pre></div><h3 id="command-xsl-copy-of-in-xml-sel-command"><a class="header-anchor" href="#command-xsl-copy-of-in-xml-sel-command" aria-hidden="true">#</a> Command: xsl:copy-of in xml sel command</h3><div class="language-"><pre><code>xml sel -B -t -m /xml/table/rec -c . -n xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;rec id=&quot;1&quot;&gt;&lt;numField&gt;123&lt;/numField&gt;&lt;stringField&gt;String Value&lt;/stringField&gt;&lt;/rec&gt;\n&lt;rec id=&quot;2&quot;&gt;&lt;numField&gt;346&lt;/numField&gt;&lt;stringField&gt;Text Value&lt;/stringField&gt;&lt;/rec&gt;\n&lt;rec id=&quot;3&quot;&gt;&lt;numField&gt;-23&lt;/numField&gt;&lt;stringField&gt;stringValue&lt;/stringField&gt;&lt;/rec&gt;\n</code></pre></div><h3 id="command-query-xml-document-and-produce-sorted-text-table"><a class="header-anchor" href="#command-query-xml-document-and-produce-sorted-text-table" aria-hidden="true">#</a> Command: Query XML document and produce sorted text table</h3><div class="language-"><pre><code>xml sel -T -t -m /xml/table/rec -s D:N:- &quot;@id&quot; -v &quot;concat(@id,&#39;|&#39;,numField,&#39;|&#39;,stringField)&quot; -n xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>3|-23|stringValue\n2|346|Text Value\n1|123|String Value\n</code></pre></div><h3 id="command-print-structure-of-xml-element-using-xml-sel-advanced-xpath-expressions-and-xml-sel-command-usage"><a class="header-anchor" href="#command-print-structure-of-xml-element-using-xml-sel-advanced-xpath-expressions-and-xml-sel-command-usage" aria-hidden="true">#</a> Command: Print structure of XML element using xml sel (advanced XPath expressions and xml sel command usage)</h3><div class="language-"><pre><code>xml sel -T -t -m &#39;//*&#39; \\\n-m &#39;ancestor-or-self::*&#39; -v &#39;name()&#39; -i &#39;not(position()=last())&#39; -o . -b -b -n \\\nxml/structure.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>a1\na1.a11\na1.a11.a111\na1.a11.a111.a1111\na1.a11.a112\na1.a11.a112.a1121\na1.a12\na1.a13\na1.a13.a131\n</code></pre></div><h3 id="command-calculating-running-sum-on-xml-document"><a class="header-anchor" href="#command-calculating-running-sum-on-xml-document" aria-hidden="true">#</a> Command: Calculating running sum on XML document</h3><div class="language-"><pre><code>xml sel -t -v &quot;sum(/xml/table/rec/numField)&quot; xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>446\n</code></pre></div><h3 id="command-indent-xml-document-with-tabs"><a class="header-anchor" href="#command-indent-xml-document-with-tabs" aria-hidden="true">#</a> Command: Indent XML document with tabs</h3><div class="language-"><pre><code>cat xml/tab-obj.xml | xml fo --indent-tab \n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n\t&lt;table&gt;\n\t\t&lt;rec id=&quot;1&quot;&gt;\n\t\t\t&lt;numField&gt;123&lt;/numField&gt;\n\t\t\t&lt;stringField&gt;String Value&lt;/stringField&gt;\n\t\t\t&lt;object name=&quot;Obj1&quot;&gt;\n\t\t\t\t&lt;property name=&quot;size&quot;&gt;10&lt;/property&gt;\n\t\t\t\t&lt;property name=&quot;type&quot;&gt;Data&lt;/property&gt;\n\t\t\t&lt;/object&gt;\n\t\t&lt;/rec&gt;\n\t\t&lt;rec id=&quot;2&quot;&gt;\n\t\t\t&lt;numField&gt;346&lt;/numField&gt;\n\t\t\t&lt;stringField&gt;Text Value&lt;/stringField&gt;\n\t\t&lt;/rec&gt;\n\t\t&lt;rec id=&quot;3&quot;&gt;\n\t\t\t&lt;numField&gt;-23&lt;/numField&gt;\n\t\t\t&lt;stringField&gt;stringValue&lt;/stringField&gt;\n\t\t&lt;/rec&gt;\n\t&lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><h3 id="command-generate-plain-text-table-from-xml-document"><a class="header-anchor" href="#command-generate-plain-text-table-from-xml-document" aria-hidden="true">#</a> Command: Generate plain text table from XML document</h3><div class="language-"><pre><code>xml sel -T -t -m /xml/table/rec -v &quot;@id&quot; -o &quot;|&quot; -v numField -o &quot;|&quot; -v stringField -n xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>1|123|String Value\n2|346|Text Value\n3|-23|stringValue\n</code></pre></div><h3 id="command-generate-plain-text-table-from-xml-document-1"><a class="header-anchor" href="#command-generate-plain-text-table-from-xml-document-1" aria-hidden="true">#</a> Command: Generate plain text table from XML document</h3><div class="language-"><pre><code>xml sel -T -t -m /xml/table/rec -v &quot;concat(@id,&#39;|&#39;,numField,&#39;|&#39;,stringField)&quot; -n xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>1|123|String Value\n2|346|Text Value\n3|-23|stringValue\n</code></pre></div><h3 id="command-generate-plain-text-table-from-xml-document-2"><a class="header-anchor" href="#command-generate-plain-text-table-from-xml-document-2" aria-hidden="true">#</a> Command: Generate plain text table from XML document</h3><div class="language-"><pre><code>xml sel -T \\\n    -t -o &quot;===================&quot; -n \\\n       -m xml/table/rec -v &quot;concat(@id,&#39;|&#39;,numField,&#39;|&#39;,stringField)&quot; -n \\\n    -t -o &quot;===================&quot; -n xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>===================\n\n1|123|String Value\n2|346|Text Value\n3|-23|stringValue\n\n===================\n</code></pre></div><h3 id="command-select-from-xml-document-containing-unicode-characters"><a class="header-anchor" href="#command-select-from-xml-document-containing-unicode-characters" aria-hidden="true">#</a> Command: Select from XML document containing unicode characters</h3><div class="language-"><pre><code>xml sel -T -t -m &quot;//test[@lang=&#39;fran&amp;#231;ais&#39;]/@lang&quot; -v . -n xml/unicode.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>franÃ§ais\nfranÃ§ais\nfranÃ§ais\n</code></pre></div><h3 id="command-update-value-of-an-attribute"><a class="header-anchor" href="#command-update-value-of-an-attribute" aria-hidden="true">#</a> Command: Update value of an attribute</h3><div class="language-"><pre><code>xml ed -u &#39;/xml/table/rec[@id=3]/@id&#39; -v 5 xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n  &lt;table&gt;\n    &lt;rec id=&quot;1&quot;&gt;\n      &lt;numField&gt;123&lt;/numField&gt;\n      &lt;stringField&gt;String Value&lt;/stringField&gt;\n      &lt;object name=&quot;Obj1&quot;&gt;\n        &lt;property name=&quot;size&quot;&gt;10&lt;/property&gt;\n        &lt;property name=&quot;type&quot;&gt;Data&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;2&quot;&gt;\n      &lt;numField&gt;346&lt;/numField&gt;\n      &lt;stringField&gt;Text Value&lt;/stringField&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;5&quot;&gt;\n      &lt;numField&gt;-23&lt;/numField&gt;\n      &lt;stringField&gt;stringValue&lt;/stringField&gt;\n    &lt;/rec&gt;\n  &lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><h3 id="command-update-value-of-an-element"><a class="header-anchor" href="#command-update-value-of-an-element" aria-hidden="true">#</a> Command: Update value of an element</h3><div class="language-"><pre><code>xml ed -u &#39;/xml/table/rec[@id=1]/numField&#39; -v 0 xml/tab-obj.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xml&gt;\n  &lt;table&gt;\n    &lt;rec id=&quot;1&quot;&gt;\n      &lt;numField&gt;0&lt;/numField&gt;\n      &lt;stringField&gt;String Value&lt;/stringField&gt;\n      &lt;object name=&quot;Obj1&quot;&gt;\n        &lt;property name=&quot;size&quot;&gt;10&lt;/property&gt;\n        &lt;property name=&quot;type&quot;&gt;Data&lt;/property&gt;\n      &lt;/object&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;2&quot;&gt;\n      &lt;numField&gt;346&lt;/numField&gt;\n      &lt;stringField&gt;Text Value&lt;/stringField&gt;\n    &lt;/rec&gt;\n    &lt;rec id=&quot;3&quot;&gt;\n      &lt;numField&gt;-23&lt;/numField&gt;\n      &lt;stringField&gt;stringValue&lt;/stringField&gt;\n    &lt;/rec&gt;\n  &lt;/table&gt;\n&lt;/xml&gt;\n</code></pre></div><h3 id="command-validate-xml-documents-using-well-formedness-dtd-xsd-relaxng-checks"><a class="header-anchor" href="#command-validate-xml-documents-using-well-formedness-dtd-xsd-relaxng-checks" aria-hidden="true">#</a> Command: Validate XML documents using well-formedness/DTD/XSD/RelaxNG checks</h3><div class="language-"><pre><code>echo &quot;===============================================&quot;\necho &quot;Well-Formedness Validation Tests&quot;\necho &quot;- 1 -------------------------------------------&quot;\nxml val xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 2 -------------------------------------------&quot;\nxml val -g xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 3 -------------------------------------------&quot;\nxml val -b xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 4 -------------------------------------------&quot;\nxml val -q xml/table.xml xml/tab-obj.xml 2&gt;/dev/null; echo $?\n\necho &quot;===============================================&quot;\necho &quot;DTD Validation Tests&quot;\necho &quot;- 1 -------------------------------------------&quot;\nxml val -d dtd/table.dtd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 2 -------------------------------------------&quot;\nxml val -g -d dtd/table.dtd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 3 -------------------------------------------&quot;\nxml val -b -d dtd/table.dtd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 4 -------------------------------------------&quot;\nxml val -q -d dtd/table.dtd xml/table.xml 2&gt;/dev/null; echo $?\n\necho &quot;===============================================&quot;\necho &quot;Schema Validation Tests&quot;\necho &quot;- 1 -------------------------------------------&quot;\nxml val -s xsd/table.xsd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 2 -------------------------------------------&quot;\nxml val -g -s xsd/table.xsd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 3 -------------------------------------------&quot;\nxml val -b -s xsd/table.xsd xml/table.xml xml/tab-obj.xml xml/tab-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 4 -------------------------------------------&quot;\nxml val -q -s xsd/table.xsd xml/table.xml 2&gt;/dev/null; echo $?\n\necho &quot;===============================================&quot;\necho &quot;RelaxNG Schema Validation Tests&quot;\necho &quot;- 1 -------------------------------------------&quot;\nxml val -r relaxng/address.rng relaxng/address.xml relaxng/address-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 2 -------------------------------------------&quot;\nxml val -g -r relaxng/address.rng relaxng/address.xml relaxng/address-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 3 -------------------------------------------&quot;\nxml val -b -r relaxng/address.rng relaxng/address.xml relaxng/address-bad.xml 2&gt;/dev/null; echo $?\necho &quot;- 4 -------------------------------------------&quot;\nxml val -q -r relaxng/address.rng relaxng/address.xml 2&gt;/dev/null; echo $?\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>===============================================\nWell-Formedness Validation Tests\n- 1 -------------------------------------------\nxml/table.xml - valid\nxml/tab-obj.xml - valid\nxml/tab-bad.xml - invalid\n1\n- 2 -------------------------------------------\nxml/table.xml\nxml/tab-obj.xml\n1\n- 3 -------------------------------------------\nxml/tab-bad.xml\n1\n- 4 -------------------------------------------\n0\n===============================================\nDTD Validation Tests\n- 1 -------------------------------------------\nxml/table.xml - valid\nxml/tab-obj.xml - invalid\nxml/tab-bad.xml - invalid\n1\n- 2 -------------------------------------------\nxml/table.xml\n1\n- 3 -------------------------------------------\nxml/tab-obj.xml\nxml/tab-bad.xml\n1\n- 4 -------------------------------------------\n0\n===============================================\nSchema Validation Tests\n- 1 -------------------------------------------\nxml/table.xml - valid\nxml/tab-obj.xml - invalid\nxml/tab-bad.xml - invalid\n1\n- 2 -------------------------------------------\nxml/table.xml\n1\n- 3 -------------------------------------------\nxml/tab-obj.xml\nxml/tab-bad.xml\n1\n- 4 -------------------------------------------\n0\n===============================================\nRelaxNG Schema Validation Tests\n- 1 -------------------------------------------\nrelaxng/address.xml - valid\nrelaxng/address-bad.xml - invalid\n1\n- 2 -------------------------------------------\nrelaxng/address.xml\n1\n- 3 -------------------------------------------\nrelaxng/address-bad.xml\n1\n- 4 -------------------------------------------\n0\n</code></pre></div><h3 id="command-include-one-xml-document-into-another-using-xinclude"><a class="header-anchor" href="#command-include-one-xml-document-into-another-using-xinclude" aria-hidden="true">#</a> Command: Include one XML document into another using XInclude</h3><div class="language-"><pre><code>xml tr --xinclude xsl/cat.xsl xml/document.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;document xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;&gt;\n  &lt;p&gt;120 Mz is adequate for an average home user.&lt;/p&gt;\n  &lt;disclaimer xml:base=&quot;xml/disclaimer.xml&quot;&gt;\n  &lt;p&gt;The opinions represented herein represent those of the individual\n  and should not be interpreted as official policy endorsed by this\n  organization.&lt;/p&gt;\n&lt;/disclaimer&gt;\n&lt;/document&gt;\n</code></pre></div><h3 id="command-passing-parameters-to-xslt-stylesheet"><a class="header-anchor" href="#command-passing-parameters-to-xslt-stylesheet" aria-hidden="true">#</a> Command: Passing parameters to XSLT stylesheet</h3><div class="language-"><pre><code>xml tr xsl/param1.xsl -p Count=&#39;count(/xml/table/rec)&#39; -s Text=&quot;Count=&quot; xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>Count=3\n</code></pre></div><h3 id="command-applying-xslt-stylesheet-to-xml-document"><a class="header-anchor" href="#command-applying-xslt-stylesheet-to-xml-document" aria-hidden="true">#</a> Command: Applying XSLT stylesheet to XML document</h3><div class="language-"><pre><code>xml tr xsl/sum1.xsl xml/table.xml\n</code></pre></div><p>Result Output:</p><div class="language-"><pre><code>446\n</code></pre></div>',226);a.render=function(l,n,a,m,r,i){return t(),e("div",null,[o])};export{n as __pageData,a as default};
