import{o as e,c as a,a as h}from"./app.e2261b09.js";const r='{"title":"30 лучших практик разработки и тестирования программного обеспечения","description":"","frontmatter":{"title":"30 лучших практик разработки и тестирования программного обеспечения","date":"2021/02/22 13:55:28","cover_index":"http://picsum.photos/450/450?random=26","tags":null,"categories":["aboutMe"]},"headers":[{"level":2,"title":"30 лучших практик разработки и тестирования программного обеспечения","slug":"_30-nучших-практик-разработки-и-тестирования-программного-обеспечения"},{"level":2,"title":"YAGNI","slug":"yagni"},{"level":2,"title":"DRY","slug":"dry"},{"level":2,"title":"Тесты не нуждаются в тестировании","slug":"тесты-не-нуждаются-в-тестировании"},{"level":2,"title":"третий раз вы пишете код","slug":"третий-раз-вы-пишете-код"},{"level":2,"title":"дизайн API","slug":"дизайн-api"},{"level":2,"title":"Быстро потерпите неудачу","slug":"быстро-потерпите-неудачу"},{"level":2,"title":"Модульные тесты","slug":"модуnьные-тесты"},{"level":2,"title":"Для модульных тестов","slug":"дnя-модуnьных-тестов"},{"level":2,"title":"Код - это враг","slug":"код-это-враг"},{"level":2,"title":"комментарии к коду неизбежно становятся ложью","slug":"комментарии-к-коду-неизбежно-становятся-nожью"},{"level":2,"title":"Пишите защитно","slug":"пишите-защитно"},{"level":2,"title":"Логику легко протестировать","slug":"логику-nегко-протестировать"},{"level":2,"title":"Глобалы плохи","slug":"гnобаnы-пnохи"},{"level":2,"title":"Использование встроенных типов","slug":"испоnьзование-встроенных-типов"},{"level":2,"title":"Внедрение зависимостей","slug":"внедрение-зависимостей"},{"level":2,"title":"Цель - небольшие тестируемые модули","slug":"цеnь-небоnьшие-тестируемые-модуnи"},{"level":2,"title":"внешние интерфейсы API - боль","slug":"внешние-интерфейсы-api-боnь"},{"level":2,"title":"30 и 500","slug":"_30-и-500"},{"level":2,"title":"Туда не пиши - сюда пиши, а то снег «башка» попадёт","slug":"туда-не-пиши-сюда-пиши-а-то-снег-«башка»-попадёт"},{"level":2,"title":"Рефакторинг","slug":"рефакторинг"}],"relativePath":"blog/best-practices.md","lastUpdated":1628440934662}',l={},i=h('<h2 id="_30-nучших-практик-разработки-и-тестирования-программного-обеспечения"><a class="header-anchor" href="#_30-nучших-практик-разработки-и-тестирования-программного-обеспечения" aria-hidden="true">#</a> 30 лучших практик разработки и тестирования программного обеспечения</h2><p>Эти правила разработки программного обеспечения и передовые методы тестирования могут помочь вам сэкономить время и избавиться от головной боли.</p><h2 id="yagni"><a class="header-anchor" href="#yagni" aria-hidden="true">#</a> YAGNI</h2><p>YAGNI («You aren&#39;t gonna need it»; с англ. — «Вам это не понадобится»). Не пишите код, который, по вашему мнению, может вам понадобиться в будущем, но пока не нужен. Это кодирование для воображаемых будущих вариантов использования , и неизбежно код станет мертвым кодом или будет нуждаться в переписывании, потому что будущий вариант использования всегда работает несколько иначе, чем вы его себе представляли.</p><p>Если вы добавите код для будущего использования, я поставлю его под сомнение при проверке кода. (Вы можете и должны разрабатывать API, например, чтобы разрешить варианты использования в будущем, но это уже другая проблема.)</p><p>То же самое и с кодом комментирования; если в выпуск входит блок закомментированного кода, его не должно быть. Если это код, который можно восстановить, сделайте билет и укажите хэш фиксации для удаления кода. YAGNI - это ключевой элемент гибкого программирования . Лучшее руководство для этого - « Объяснение экстремального программирования » Кента Бека.</p><h2 id="dry"><a class="header-anchor" href="#dry" aria-hidden="true">#</a> DRY</h2><p>Don&#39;t Repeat Yourself - имеет гораздо меньшее значение в тестах, чем в производственном коде. Читаемость отдельного тестового файла более важна, чем ремонтопригодность (выделение многоразовых фрагментов). Это потому, что тесты выполняются и читаются индивидуально, а не сами по себе, будучи частью более крупной системы. Очевидно, что чрезмерное повторение означает, что для удобства можно создавать повторно используемые компоненты, но это гораздо менее важно, чем для производства.</p><h2 id="тесты-не-нуждаются-в-тестировании"><a class="header-anchor" href="#тесты-не-нуждаются-в-тестировании" aria-hidden="true">#</a> Тесты не нуждаются в тестировании</h2><p>Тесты не нуждаются в тестировании. Инфраструктура, фреймворки и библиотеки для тестирования нуждаются в тестах. Не испытывайте браузер или внешние библиотеки , если вы действительно не нужны. Тестируйте код, который вы пишете, а не чужой.</p><h2 id="третий-раз-вы-пишете-код"><a class="header-anchor" href="#третий-раз-вы-пишете-код" aria-hidden="true">#</a> третий раз вы пишете код</h2><p>третий раз вы пишете тот же кусок кода в нужное время , чтобы извлечь его в качестве помощника общего назначения (и тесты записи для него). Вспомогательные функции в тесте не нуждаются в тестировании; когда вы разбиваете их и повторно используете, им действительно нужны тесты. К тому времени, когда вы в третий раз напишете похожий код, вы будете иметь четкое представление о том, какую форму вы решаете универсальную проблему.</p><h2 id="дизайн-api"><a class="header-anchor" href="#дизайн-api" aria-hidden="true">#</a> дизайн API</h2><p>Что касается дизайна API (внешний вид и объектный API): простые вещи должны быть простыми; сложные вещи должны быть возможны . Сначала проектируйте для простого случая, желательно с нулевой конфигурацией или параметризацией, если это возможно. Добавьте параметры или дополнительные методы API для более сложных и гибких вариантов использования (по мере необходимости).</p><h2 id="быстро-потерпите-неудачу"><a class="header-anchor" href="#быстро-потерпите-неудачу" aria-hidden="true">#</a> Быстро потерпите неудачу</h2><p>Быстро потерпите неудачу. Проверьте ввод и откажитесь от бессмысленного ввода или недопустимого состояния как можно раньше, желательно с исключением или ответом об ошибке, которые сделают точную проблему ясной для вашего вызывающего абонента. Однако разрешите «новаторские» варианты использования вашего кода (т. Е. Не выполняйте проверку типов для проверки ввода, если вам это действительно не нужно).</p><h2 id="модуnьные-тесты"><a class="header-anchor" href="#модуnьные-тесты" aria-hidden="true">#</a> Модульные тесты</h2><p>Модульные тесты - это проверка на единицу поведения, а не на единицу реализации. Целью является изменение реализации без изменения поведения или необходимости изменения каких-либо тестов, хотя это не всегда возможно. Поэтому, где это возможно, относитесь к своим тестовым объектам как к черным ящикам, тестируя через общедоступный API, не вызывая частных методов и не вмешиваясь в состояние.</p><p>Для некоторых сложных сценариев - таких как тестирование поведения в определенном сложном состоянии для поиска неясной ошибки - это может быть невозможно. Написание тестов в первую очередь действительно помогает в этом, поскольку заставляет задуматься о поведении вашего кода и о том, как вы собираетесь его тестировать, прежде чем писать. Тестирование сначала поощряет меньшие, более модульные единицы кода, что обычно означает лучший код.</p><h2 id="дnя-модуnьных-тестов"><a class="header-anchor" href="#дnя-модуnьных-тестов" aria-hidden="true">#</a> Для модульных тестов</h2><p>Для модульных тестов (включая тесты тестовой инфраструктуры) должны быть протестированы все пути кода. 100% покрытие - хорошее место для начала. Вы не можете охватить все возможные перестановки / комбинации состояний (комбинаторный взрыв), поэтому это требует рассмотрения. Пути кода следует оставлять непроверенными только при наличии очень веской причины. Нехватка времени не является уважительной причиной и требует больше времени. Возможные веские причины включают: действительно непроверяемый (каким-либо значимым образом), невозможный на практике или покрытый где-либо еще в тесте. Код без тестов - это ответственность. Измерение охвата и отклонение PR, снижающих процент охвата, - это один из способов обеспечить постепенный прогресс в правильном направлении.</p><h2 id="код-это-враг"><a class="header-anchor" href="#код-это-враг" aria-hidden="true">#</a> Код - это враг</h2><p>Код - это враг: он может пойти не так, и его нужно поддерживать. Пишите меньше кода. Удалить код. Не пишите код, который вам не нужен.</p><h2 id="комментарии-к-коду-неизбежно-становятся-nожью"><a class="header-anchor" href="#комментарии-к-коду-неизбежно-становятся-nожью" aria-hidden="true">#</a> комментарии к коду неизбежно становятся ложью</h2><p>Со временем комментарии к коду неизбежно становятся ложью. На практике мало кто обновляет комментарии, когда что-то меняется. Стремитесь сделать свой код читабельным и самодокументируемым с помощью передовых методов именования и известного стиля программирования.</p><p>Код, который невозможно сделать очевидным - работа над непонятной ошибкой или маловероятным условием, или необходимая оптимизация - действительно нуждается в комментариях. Прокомментируйте намерение кода и то, почему он что-то делает, а не то, что он делает. (Кстати, этот конкретный пункт о том, что комментарии являются ложью, является спорным.</p><h2 id="пишите-защитно"><a class="header-anchor" href="#пишите-защитно" aria-hidden="true">#</a> Пишите защитно</h2><p>Пишите защитно. Всегда думайте о том, что может пойти не так, что произойдет при недопустимом вводе, а что может выйти из строя, что поможет вам отловить множество ошибок до того, как они произойдут.</p><h2 id="логику-nегко-протестировать"><a class="header-anchor" href="#логику-nегко-протестировать" aria-hidden="true">#</a> Логику легко протестировать</h2><p>Логику легко протестировать, если она не имеет состояния и побочных эффектов. Разбейте логику на отдельные функции, а не смешивайте логику с кодом с сохранением состояния и кодом с побочными эффектами. Разделение кода с сохранением состояния и кода с побочными эффектами на более мелкие функции упрощает имитацию и модульное тестирование без побочных эффектов. (Меньшие накладные расходы на тесты означают более быстрые тесты.) Побочные эффекты действительно нуждаются в тестировании, но тестировать их один раз и высмеивать их везде, как правило, является хорошим шаблоном.</p><h2 id="гnобаnы-пnохи"><a class="header-anchor" href="#гnобаnы-пnохи" aria-hidden="true">#</a> Глобалы плохи</h2><p>Глобалы плохи. Функции лучше типов. Объекты, вероятно, лучше сложных структур данных.</p><h2 id="испоnьзование-встроенных-типов"><a class="header-anchor" href="#испоnьзование-встроенных-типов" aria-hidden="true">#</a> Использование встроенных типов</h2><p>Использование встроенных типов, например, Python и их методов будет быстрее, чем написание ваших собственных типов (если вы не пишете на C). Если производительность важна, попробуйте решить, как использовать стандартные встроенные типы, а не настраиваемые объекты.</p><h2 id="внедрение-зависимостей"><a class="header-anchor" href="#внедрение-зависимостей" aria-hidden="true">#</a> Внедрение зависимостей</h2><p>Внедрение зависимостей - полезный паттерн кодирования, позволяющий четко определить, что такое ваши зависимости и откуда они берутся. (Объекты, методы и т. Д. Получают свои зависимости в качестве параметров, а не создают экземпляры новых объектов сами по себе.) Это действительно усложняет подписи API, так что это компромисс. В конце концов, использование метода, которому требуется 10 параметров для всех его зависимостей, в любом случае является хорошим признаком того, что ваш код делает слишком много.</p><h2 id="цеnь-небоnьшие-тестируемые-модуnи"><a class="header-anchor" href="#цеnь-небоnьшие-тестируемые-модуnи" aria-hidden="true">#</a> Цель - небольшие тестируемые модули</h2><p>Чем больше вам придется имитировать для тестирования вашего кода, тем хуже ваш код. Чем больше кода вам нужно создать и внедрить, чтобы иметь возможность протестировать определенный фрагмент поведения, тем хуже ваш код. Цель - небольшие тестируемые модули, а также интеграция более высокого уровня и функциональные тесты для проверки правильности взаимодействия модулей.</p><h2 id="внешние-интерфейсы-api-боnь"><a class="header-anchor" href="#внешние-интерфейсы-api-боnь" aria-hidden="true">#</a> внешние интерфейсы API - боль</h2><p>Внешние API - это то место, где действительно важна «предварительная разработка» и рассмотрение будущих вариантов использования. Изменение API - это боль для нас и наших пользователей, а создание обратной несовместимости ужасно (хотя иногда невозможно избежать). Тщательно создавайте внешние интерфейсы API, придерживаясь принципа «простые вещи должны быть простыми».</p><h2 id="_30-и-500"><a class="header-anchor" href="#_30-и-500" aria-hidden="true">#</a> 30 и 500</h2><p>Если функция или метод превышает 30 строк кода, подумайте о том, чтобы разбить его. Хороший максимальный размер модуля составляет около 500 строк. Файлы тестов, как правило, длиннее этого.</p><h2 id="туда-не-пиши-сюда-пиши-а-то-снег-«башка»-попадёт"><a class="header-anchor" href="#туда-не-пиши-сюда-пиши-а-то-снег-«башка»-попадёт" aria-hidden="true">#</a> Туда не пиши - сюда пиши, а то снег «башка» попадёт</h2><p>Не пиши там, где программисты обычно не ожидают найти код.</p><h2 id="рефакторинг"><a class="header-anchor" href="#рефакторинг" aria-hidden="true">#</a> Рефакторинг</h2><p>Проводите рефакторинг, когда это возможно. Каждое преобразование должно улучшать структуру программы, не изменяя её поведения. Потенциальные преимущества рефакторинга заключаются в повышении читаемости кода и понижении его сложности. Это повысит удобство при сопровождении кода и создаст более простую, чистую и выразительную архитектуру.</p>',46);l.render=function(h,r,l,n,d,t){return e(),a("div",null,[i])};export{r as __pageData,l as default};
