import{o as t,c as e,a as o}from"./app.e2261b09.js";const a='{"title":"Проект asciinema","description":"","frontmatter":{"title":"Проект asciinema","date":"2020/12/09 13:41:55","cover_index":"http://picsum.photos/450/450?random=23","tags":null,"categories":["Innovate","httpsBuilding"]},"headers":[{"level":2,"title":"Проект asciinema","slug":"проект-asciinema"},{"level":2,"title":"Один формат — много возможностей","slug":"один-формат-—-много-возможностей"}],"relativePath":"blog/asciinema.md","lastUpdated":1628443381410}',i={},u=o('<h2 id="проект-asciinema"><a class="header-anchor" href="#проект-asciinema" aria-hidden="true">#</a> Проект asciinema</h2><blockquote><p>Скринкаст терминала с помощью asciinema</p></blockquote><p>Проект asciinema состоит из нескольких взаимодополняющих частей:</p><ul><li>регистратор сеансов терминала на основе командной строки asciinema,</li><li>сайт с API на <a href="http://asciinema.org" target="_blank" rel="noopener noreferrer">asciinema.org</a>,</li><li>проигрыватель javascript</li></ul><p>Вы наверняка знакомы с asciinema (<a href="https://github.com/asciinema/asciinema" target="_blank" rel="noopener noreferrer">github</a>), это удобный опенсорсный инструмент для записи действий в терминале. Записи сохраняются в простом для чтения текстовом формате, поэтому весят совсем немного, а веб-плеер по сути воспроизводит текст из терминала вместо видео, так что любой кусок можно скопировать и использовать. Готовый материал можно загрузить в одно нажатие на <a href="https://asciinema.org/" target="_blank" rel="noopener noreferrer">asciinema.org</a> или сначала отредактировать локально. Плеер можно встроить на сайт буквально в три строки, бонусом прилагаются всякие плюшки с оформлением и совместимостью, и вообще по совокупности всех фич (и отсутствия головной боли) asciinema давно перерос все аналоги. Вот только есть несостыковка: записи в проекте называют asciicasts, по аналогии со скринкастами — но возможности стримить сессию в реальном времени не было несколько лет, пока не вышел релиз 2.0, в котором с помощью нового формата файлов удалось реализовать на удивление стабильную и удобную раздачу на любой терминал в реал-тайме. О том, как это работает, о подводных камнях и перспективах — под катом.</p><h2 id="один-формат-—-много-возможностей"><a class="header-anchor" href="#один-формат-—-много-возможностей" aria-hidden="true">#</a> Один формат — много возможностей</h2><p>В старых версиях данные записывались в JSON, что добавляло немало оверхеда, да и парсинг у него нетривиальный, а главное, объект неудобно дробить на чанки для частичной передачи и чтения данных. На смену пришёл кастомный формат</p><div class="language-"><pre><code>  {&quot;version&quot;: 2, &quot;width&quot;: 236, &quot;height&quot;: 54, &quot;timestamp&quot;: 1613998795, &quot;idle_time_limit&quot;: 1.0, &quot;env&quot;: {&quot;SHELL&quot;: &quot;/bin/bash&quot;, &quot;TERM&quot;: &quot;screen&quot;}}\n  [0.023635, &quot;o&quot;, &quot;client@some-desktop:~$ &quot;]\n  [0.812065, &quot;o&quot;, &quot;h&quot;]\n  [1.087183, &quot;o&quot;, &quot;e&quot;]\n  [1.246706, &quot;o&quot;, &quot;l&quot;]\n  [1.473065, &quot;o&quot;, &quot;l&quot;]\n  [1.657363, &quot;o&quot;, &quot;o&quot;]\n  [4.114169, &quot;o&quot;, &quot;exit\\r\\n&quot;]\n</code></pre></div>',8);i.render=function(o,a,i,n,r,s){return t(),e("div",null,[u])};export{a as __pageData,i as default};
